#require "mostek-3870-asm >= 0.0.1"

; keyscan
; 
;   Created for a 16-key pad such as the AK-1604-N-BWB. Rows
;   0-3 are connected to P1-0 through P1-3, and columns 
;   0-3 are connected to P1-4 to P1-7. The key number for each
;   key is shown below int eh KEYPAD_* constants.
; 
;   Uses scratch pad memory $2D to $3F. While operating, also uses
;   scrath pad registers 4-11. 
; 
;   Will debounce down presses. (TODO: debounce button releases)
; 
;   The utility function clear_scratchpad should be called before strting the key
;   scan loop
; 
;   All current keys pressed are reporting in the 16-bit map in scratch pad
;   memory $2E and $2F, with least signficant bit (0 of $2F) representing key 0
;   and the most signficant bit (7 of $2E) representing key 15. Furthermore,
;   if only operating on 1 key pressed, the pressed key with the lowest key value
;   is placed in scratch pad memory $2D (CURRENT_KEY_SP). A value of $FF in this
;   location means no keys are pressed.
; 


KEYPAD_0 = 13
KEYPAD_1 = 0
KEYPAD_2 = 1
KEYPAD_3 = 2
KEYPAD_4 = 4
KEYPAD_5 = 5
KEYPAD_6 = 6
KEYPAD_7 = 8
KEYPAD_8 = 9
KEYPAD_9 = 10
KEYPAD_STAR = 12
KEYPAD_HASH = 14
KEYPAD_A = 3
KEYPAD_B = 7
KEYPAD_C = 11
KEYPAD_D = 15 


KEYPAD_PORT = 1

KEY_STATUS_SP = $30
ACTIVE_KEYS_SP = $2E
CURRENT_KEY_SP = $2D

_ROW_NUM_SP = 4
_COL_NUM_SP = 5
_PORTWORD_SP = 6
_COL_MASK_SP = 7
_COLUMN_KEY_DATA_SP = 8
_CURRENT_KEY_NUM_SP = 9
_TEMP_SP = 10
_TIMER_SP = 11

; number of consecutive key downs before key is considered active
_KEY_ACTIVE_COUNT = 4
_SCAN_LOOP_DELAY = $32

keyscan:
    ; set up working registers
    lis 3
    lr _ROW_NUM_SP,a                ; init row num to 3
    lis 8
    lr _PORTWORD_SP,a               ; init port word to 8
    lis $f
    lr _CURRENT_KEY_NUM_SP,a        ; set current key to 15
.row_loop:
    lr a,_PORTWORD_SP               ; place current port word into A
    outs KEYPAD_PORT                ; write it to the keypad port
    ins KEYPAD_PORT                 ; read in keypad port 
    sr 4                            ; only need upper nibble of keypad port 
    lr _COLUMN_KEY_DATA_SP,a        ; save column data
    ; test each column
    lis 3   
    lr _COL_NUM_SP,a                ; init column num to 3
    lis 8
    lr _COL_MASK_SP,a               ; init column num to 3
.col_loop:
    ; first, set IS to key status scratch pad
    li KEY_STATUS_SP
    as _CURRENT_KEY_NUM_SP          ; add key number to 
    lr is,a                         ; place key status sratch pad location in IS
    ; not test to see if current column is pressed
    lr a,_COLUMN_KEY_DATA_SP        ; load column data
    ns _COL_MASK_SP
    bnz .handle_key                 ; if not zero, a key is pressed 
    ; key is not pressed, update key status
    lr a,[is]                       ; fetch key status
    ci 0                            ; if already zero, do nothing
    bz .col_loop_next
    ; key is not pressed, set status to 0
    clr
    lr [is],a                       
    br .col_loop_next
.handle_key:
    ; key is pressed, decrement key status
    lr a,[is]                       ; fetch key status
    ci (_KEY_ACTIVE_COUNT-1)        ; check to see if we are at max count
    bnc .col_loop_next              ; key status is == _KEY_ACTIVE_COUNT (should not be >)
    inc                             ; increment key status
    lr [is],a                       ; update key status
.col_loop_next:
    ; set up for next loop
    ds _CURRENT_KEY_NUM_SP          ; decrement key number
    lr a,_COL_NUM_SP
    ci 0                            ; check if we are at col 0 already
    bz .row_loop_next               ; .. if so, next row
    ds _COL_NUM_SP                  ; decrement column
    lr a,_COL_MASK_SP
    sr 1                            ; shift column mask
    lr _COL_MASK_SP,a
    br .col_loop                    ; next column loop
.row_loop_next:
    lr a,_ROW_NUM_SP
    ci 0                            ; check to see if we are alredy at row 0
    bz .done_keyscan
    ds _ROW_NUM_SP
    lr a,_PORTWORD_SP
    sr 1
    lr _PORTWORD_SP,a               ; shift port word right
    ;set up small delay
    li _SCAN_LOOP_DELAY
    lr _TIMER_SP,a                  ; set up timer
.delay_loop:
    ds _TIMER_SP
    bnz .delay_loop                 ; wait for timer
    br .row_loop

.done_keyscan:
    ; done with key scan. Now update active keys and first newly pressed
    ; set up for first loop
    lis 1
    lr _COL_MASK_SP,a
    clr
    lr _CURRENT_KEY_NUM_SP,a
    li ACTIVE_KEYS_SP
    lr is,a
    clr
    lr [is],a
    lr a,is
    inc
    lr is,a
    clr
    lr [is],a
    ; set current key press to $FF to indicate no key pressed
    li CURRENT_KEY_SP
    lr is,a
    li $FF
    lr [is],a
    ; save ACTIVE_KEYS_SP+1 value (low byte of active keys) into _TEMP_SP
    li ACTIVE_KEYS_SP+1
    lr _TEMP_SP,a
.key_byte_loop:
    li KEY_STATUS_SP
    as _CURRENT_KEY_NUM_SP
    lr is,a
    lr a,[is]
    ci (_KEY_ACTIVE_COUNT-1)        ; check to see if we are at max count
    bnc .key_is_pressed             ; if count >= threshold, it is pressed
.key_loop_continue:
    incs _CURRENT_KEY_NUM_SP
    ; see if we hit all keys
    lr a,_CURRENT_KEY_NUM_SP
    ci 15                           ; ensure key value is <= 15
    bnc .return_keyscan             ; we are done with this
    ; more keys to go
    lr a,_COL_MASK_SP
    sl 1
    ci 0
    bnz .key_loop_continue2
    ; update temp
    li ACTIVE_KEYS_SP
    lr _TEMP_SP,a
    ; reset the mask to b00000001 for next byte of key status
    ; need to also change the byte of ACTIVE_KEYS_SP refrenced in _TEMP_SP
    lis 0
    lr _TEMP_SP,a
    lis 1
.key_loop_continue2:
    lr _COL_MASK_SP,a
    br .key_byte_loop
.key_is_pressed:
    lr a,_TEMP_SP
    lr is,a
    lr a,[is]                       ; fetch current key status byte
    as _COL_MASK_SP                 ; update key status byte value
    lr [is],a                       ; replace key status byte with updated value
    ; now check if this is the first detected key press
    li CURRENT_KEY_SP
    lr is,a
    lr a,[is]
    ci $FF                          ; check to see if current key has be updated
    bnz .key_loop_continue          ; it has been updated, so return to key loop
    lr a,_CURRENT_KEY_NUM_SP
    lr [is],a             ; place current key value into CURRENT_KEY_SP
    br .key_loop_continue

.return_keyscan:
    pop


; fetch_keypad_value
; 
;   places into scratch pad 0 the value of the key in CURRENT_KEY_SP
; 
fetch_keypad_value:
    dci _keypad_value_table     ; place table addres in data counter
    li CURRENT_KEY_SP
    lr is,a
    lr a,[is]                   ; load A with key index
    adc                         ; add key index to data counter
    lm                          ; load A with memory pointed to by data counter
    lr 0,a                      ; load A into scratch pad 0
    pop                         ; return

; fetch_keypad_character
; 
;   places into scratch pad 0 the character of the key in CURRENT_KEY_SP
; 
fetch_keypad_character:
    dci _keypad_char_table      ; place table addres in data counter
    li CURRENT_KEY_SP
    lr is,a
    lr a,[is]                   ; load A with key index
    adc                         ; add key index to data counter
    lm                          ; load A with memory pointed to by data counter
    lr 0,a                      ; load A into scratch pad 0
    pop                         ; return

_keypad_value_table:
    .byte $1    ; KEYPAD_1 = 0
    .byte $2    ; KEYPAD_2 = 1
    .byte $3    ; KEYPAD_3 = 2
    .byte $A    ; KEYPAD_A = 3
    .byte $4    ; KEYPAD_4 = 4
    .byte $5    ; KEYPAD_5 = 5
    .byte $6    ; KEYPAD_6 = 6
    .byte $B    ; KEYPAD_B = 7
    .byte $7    ; KEYPAD_7 = 8
    .byte $8    ; KEYPAD_8 = 9
    .byte $9    ; KEYPAD_9 = 10
    .byte $C    ; KEYPAD_C = 11
    .byte $F    ; KEYPAD_STAR = 12
    .byte 0     ; KEYPAD_0 = 13
    .byte $E    ; KEYPAD_HASH = 14
    .byte $D    ; KEYPAD_D = 15

_keypad_char_table:
    .byte '1'   ; KEYPAD_1 = 0
    .byte '2'   ; KEYPAD_2 = 1
    .byte '3'   ; KEYPAD_3 = 2
    .byte 'A'   ; KEYPAD_A = 3
    .byte '4'   ; KEYPAD_4 = 4
    .byte '5'   ; KEYPAD_5 = 5
    .byte '6'   ; KEYPAD_6 = 6
    .byte 'B'   ; KEYPAD_B = 7
    .byte '7'   ; KEYPAD_7 = 8
    .byte '8'   ; KEYPAD_8 = 9
    .byte '9'   ; KEYPAD_9 = 10
    .byte 'C'   ; KEYPAD_C = 11
    .byte '*'   ; KEYPAD_STAR = 12
    .byte '0'   ; KEYPAD_0 = 13
    .byte '#'   ; KEYPAD_HASH = 14
    .byte 'D'   ; KEYPAD_D = 15 

